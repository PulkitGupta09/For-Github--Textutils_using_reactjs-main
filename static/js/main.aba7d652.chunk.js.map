{"version":3,"sources":["components/Navbar.js","components/Alert.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","aria-checked","htmlFor","defaultProps","about","Alert","alert","word","lower","toLowerCase","charAt","toUpperCase","slice","Capitalize","msg","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","backgroundColor","value","onChange","event","console","log","target","rows","newText","showAlert","result","replace","split","length","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDom","createRoot","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.aba7d652.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n    <div className=\"container-fluid\">\n      <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n          <li className=\"nav-item\">\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\n          </li>\n          {/* <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"/About\">{props.about}</a>\n          </li> */}\n        </ul>\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n        <input className=\"form-check-input\" onClick = {props.toggleMode} type=\"checkbox\" role=\"switch\" aria-checked=\"false\" id=\"flexSwitchCheckDefault\" />\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n      </div>\n      </div>\n    </div>\n  </nav>\n  )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    about: PropTypes.string.isRequired,\n}\n\nNavbar.defaultProps = {\n    title: 'type your title',\n    about: 'type about',\n  };\n","import React from 'react'\n\nfunction Alert(props) {\n    const Capitalize =(word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n  return (\n    props.alert &&\n    <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n    <strong>{Capitalize(props.alert.type)}</strong>: {props.alert.msg} \n    </div>\n  )\n}\n\nexport default Alert","import React,{useState} from 'react';\n// import { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nexport default function TextForm(props) {\n    const handleUpClick = ()=>{\n        // console.log(\"UpperCase was clicked\");\n        let newText = text.toUpperCase();\n        setText(newText); \n        props.showAlert(\"Converted to Uppercase!\",\"success\");\n    }\n    const handleLoClick = ()=>{\n        let newText = text.toLowerCase();\n        setText(newText); \n        props.showAlert(\"Converted to Lowercase!\",\"success\");\n    }\n    const handleClearText = ()=>{\n        let newText = \"\"\n        setText(newText); \n        props.showAlert(\"Converted to Cleartext!\",\"success\");\n    }\n\n    const RemovePunctuation = ()=>{\n            let puncs = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g;\n            let result = text.replace(puncs, '');\n            let newText = result;\n            setText(newText);\n            props.showAlert(\"Converted to RemovedPunctuation!\",\"success\");\n    }\n    const RemoveNumber = ()=>{\n            let num = /[0123456789]/g;\n            let result = text.replace(num, '');\n            let newText = result;\n            setText(newText);\n            props.showAlert(\"Converted to RemovedNumber!\",\"success\");\n    }\n\n    // Copy to Clipboard\n    // const handleCopyClick = ({ alert }) => {\n    //     setIsCopied(true);\n    //     setTimeout(() => {\n    //         setIsCopied(false);\n    //     }, 1000);\n    // }\n\n    const handleOnChange = (event)=>{\n        console.log(\"On Change\");\n        setText(event.target.value);\n    }\n\n\n\n    const [text, setText] = useState(\"\");\n    // const [isCopied, setIsCopied] = useState(false);\n\n    return (\n        <>\n        <div className='container' style = {{color : props.mode==='dark'?'white':'black'}}>\n            <h1>{props.heading}</h1>\n            <div className=\"mb-3\">\n                <textarea className=\"form-control\" style = {{backgroundColor : props.mode==='dark'?'#3B3B3B':'white',color : props.mode==='dark'?'white':'black'}}  value = {text} onChange = {handleOnChange} id=\"myBox\" rows=\"10\"></textarea>\n            </div>\n            <button className = \"btn btn-primary\" onClick = {handleUpClick}>Convert to Uppercase</button>\n            <button className = \"btn btn-primary mx-2\" onClick = {handleLoClick}>Convert to Lowercase</button>\n            <button className = \"btn btn-primary mx-2\" onClick = {RemovePunctuation}>Remove Punctuation</button>\n            <button className = \"btn btn-primary mx-2\" onClick = {RemoveNumber}>Remove Numbers</button>\n            <button className = \"btn btn-primary mx-2\" onClick = {handleClearText}>Clear Text</button>\n            {/* <CopyToClipboard text={text}>\n                        <span>\n                            <button className=\"btn btn-success mx-2\" onClick={handleCopyClick}>Copy to Clipboard</button>\n                            <span>{isCopied ? <b> Copied!</b> : false}\n                        </span>\n                        </span>\n            </CopyToClipboard> */}\n        </div>\n        <div className=\"container\" style = {{color : props.mode==='dark'?'white':'black'}}>\n        <div className=\"container my-3\">\n            <h2>Your text summary</h2>\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\n        </div>\n        <div className=\"container my-3\">\n            <h2>Preview</h2>\n            <p>{text.length>0?text:\"Enter Something in the textbox to preview it here\"}</p>\n        </div>\n        </div>\n\n        </>\n    )\n}","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert';\nimport TextForm from './components/TextForm';\nimport React,{useState} from 'react';\n\n// import { render } from \"react-dom\";\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\nfunction App() {\n  const [mode,setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n\n  const showAlert =(message,type)=>{\n      setAlert ({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 1500);\n  }\n\n  const toggleMode =()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#3B3B3B';\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been enabled\", \"success\");\n    }\n  }\n  return (\n    <>\n    {/* <BrowserRouter> */}\n<Navbar title = \"TextUtils\" about = \"About Us\" mode = {mode} toggleMode = {toggleMode}/>\n<Alert alert = {alert}/>\n<div className=\"container my-3\" >\n{/* <Routes> */}\n          {/* <Route exact path=\"/About\" */}\n            {/* element = {<About />}/> */}\n          {/* <About /> */}\n          {/* <Route exact path=\"/\" */}\n          <TextForm heading = \"Enter the text to analyze below\" mode = {mode} showAlert = {showAlert}/>\n          {/* /> */}\n          {/* </Route> */}\n{/* </Routes> */}\n</div>\n{/* </BrowserRouter> */}\n    </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n// import ReactDOM from 'react-dom';\nimport ReactDom from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nconst root = ReactDom.createRoot(document.getElementById('root'));\nroot.render(<App />);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}